using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace camera_app
{
    static class HdrProcessor
    {
        public static readonly double[] CameraResponse = new double[] { -4.29914023438561, -4.0968035388635, -3.89446684334139, -3.69213014781929, -3.48979345229717, -3.28745675677507, -3.08687390955635, -2.89766173284161, -2.72504411907051, -2.57093718840351, -2.43196557074623, -2.3060829577609, -2.19045473473731, -2.08270451043216, -1.98228164027473, -1.88787669621087, -1.79977873567067, -1.71835951646856, -1.64480134412002, -1.57990536896514, -1.52273380954698, -1.47294527547959, -1.43156393938827, -1.39717250552555, -1.36618373882755, -1.33409271745725, -1.29878426190437, -1.25678128687696, -1.20728395336838, -1.15336761078884, -1.09932611258908, -1.04904521770559, -1.0053481858276, -0.968877608511392, -0.93967346824689, -0.916595451844261, -0.899542506792426, -0.886950165940391, -0.877963937977146, -0.870217757754506, -0.863616684756906, -0.859946744409304, -0.860249576344003, -0.86377403358676, -0.869485289348545, -0.874923420549811, -0.875958342243373, -0.871386849287885, -0.858833852596311, -0.837351884830012, -0.804693789192892, -0.761644304355373, -0.710868758503781, -0.656659621364878, -0.603331942394115, -0.554126319894967, -0.51059972617757, -0.472657195358436, -0.439011535312848, -0.409287163426321, -0.384248716315248, -0.363274134458686, -0.346504916292944, -0.334287626904215, -0.32605786631286, -0.32193799313477, -0.319912931674691, -0.318841894900991, -0.318479638660051, -0.319891763485256, -0.32165018866783, -0.322436643299761, -0.319993105262038, -0.313843687429604, -0.304812077525168, -0.293338748342337, -0.280782253070866, -0.269389389373059, -0.261289650048095, -0.257127826735847, -0.256922369669015, -0.258937962165807, -0.262392009906105, -0.267050404817783, -0.272535156249327, -0.278620251300804, -0.284291775158782, -0.287731087391574, -0.287360414384844, -0.283225620177073, -0.275065523169283, -0.262274914733793, -0.244447284627996, -0.223269672115537, -0.200344073376545, -0.176912965728069, -0.153991100790849, -0.132295093383234, -0.111687291883336, -0.0915338964768161, -0.0714146993015468, -0.0510571388497617, -0.0310692456569811, -0.0119691013068202, 0.0052755505258181, 0.0198931324780173, 0.0317810557939238, 0.0414787500137901, 0.0493989223569418, 0.0572193568113161, 0.0652264430080978, 0.0737956635352227, 0.0833856696248941, 0.09324596855237, 0.102098623818805, 0.109457013646312, 0.114214730845579, 0.115538462816222, 0.112866057256124, 0.107197043567784, 0.0996106414326523, 0.0900946425261138, 0.0791992750413201, 0.0670464301004863, 0.0538278845545877, 0.0400769954620126, 0.0265880112566567, 0.013247202836839, 3.18756137478286e-10, -0.0122169878424995, -0.0225652382426923, -0.0305174261778585, -0.0352116983704325, -0.0356818452234296, -0.0308821354634786, -0.021719050939123, -0.00902280519952759, 0.00629912546957272, 0.0240383130567231, 0.0435170051500032, 0.064265689399198, 0.0859882664778731, 0.10801152307025, 0.129829255959044, 0.151010462044593, 0.17017985062349, 0.186967079881048, 0.201762567597774, 0.214709994378488, 0.226280798583788, 0.236731127532457, 0.245822734010796, 0.253197968942984, 0.258605349000329, 0.262383969050327, 0.265100080949514, 0.267034218675836, 0.268050466476532, 0.267906411978827, 0.267160349351473, 0.266201920514671, 0.2655476185026, 0.265774050784778, 0.266451119891054, 0.267237423688787, 0.267945359723336, 0.268775369033413, 0.269747757343361, 0.270309916967085, 0.269821262037716, 0.268642610438607, 0.267029467833011, 0.265422994652694, 0.264186796462354, 0.263143605681482, 0.262459858580623, 0.2621450575927, 0.262971844110378, 0.265708762526519, 0.270740196170102, 0.27826948444517, 0.288346913837683, 0.30111555381416, 0.316330303162154, 0.33309642073109, 0.3501789135513, 0.366085279581024, 0.380658941950462, 0.393891473462355, 0.406210516319009, 0.41719043395492, 0.426331947430805, 0.433574397285119, 0.439400943667536, 0.444528545398964, 0.450771483410698, 0.458627645047284, 0.468029942493481, 0.479267336087175, 0.491922893443013, 0.505713630297086, 0.520344043596564, 0.534860853617769, 0.548980906733838, 0.562875767322048, 0.576302068166789, 0.589087930927393, 0.601158847415986, 0.612053374283632, 0.622011153071636, 0.630662676939455, 0.637403224682207, 0.641705965385605, 0.643320438183927, 0.641634248312409, 0.636232848056742, 0.627094201950619, 0.614414692612412, 0.598880228755488, 0.581736854608757, 0.564312851895392, 0.547540329638577, 0.532619465084164, 0.519800856095781, 0.509622214688872, 0.502553092673345, 0.499661113362312, 0.500898230551176, 0.506472135975891, 0.515416113130486, 0.526689153737445, 0.539777573716093, 0.553880274508346, 0.568642353774128, 0.583700004634487, 0.59813137103631, 0.611245149271802, 0.622405963367067, 0.631415534723471, 0.637881871624542, 0.642139842234343, 0.64405573008466, 0.643767411699403, 0.642545391712681, 0.64074428551014, 0.6388889593223, 0.636600463542674, 0.63375540990719, 0.630212089277796, 0.626088834253305, 0.620610442133492, 0.614102483013199, 0.607225284321581, 0.600440379594835, 0.593610337283065, 0.586780294971296 };

        private static double hatFunction(double Z, uint Zmax)
        {
            uint center = Zmax / 2;
            if (Z <= center) return Z;
            else return Zmax - Z;
        }

        public static double[] ConstructHdr(List<Image> sourceImages)
        {
            double[] result = new double[sourceImages[0].Data.Length];
            double numerator;
            double denominator;
            byte pixelValue;

            //precomputed lookup table for logarithms of exposure times
            double[] logExpTimes = new double[sourceImages.Count];
            for (int i = 0; i < sourceImages.Count; i++)
            {
                logExpTimes[i] = Math.Log(sourceImages[i].ExpTime / Math.Pow(10, 6));
            }

            for (int p = 0; p < result.Length; p++)    //iterate over every pixel
            {
                numerator = 0;
                denominator = 0;
                for (int i = 0; i < sourceImages.Count; i++)  //iterate over every image
                {
                    pixelValue = sourceImages[i].Data[p];
                    numerator += hatFunction(pixelValue, 0xff) * (CameraResponse[pixelValue] - logExpTimes[i]);
                    denominator += hatFunction(pixelValue, 0xff);
                }
                if (denominator > 0) result[p] = numerator / denominator;
                else
                {
                    int middleImg = (int)(sourceImages.Count / 2);
                    result[p] = CameraResponse[sourceImages[middleImg].Data[p]] - logExpTimes[middleImg];
                }
            }
            return result;
        }

        public static Image ToneMap(double[] hdrImage, uint bitDepth)
        {
            Image result = new Image(new byte[hdrImage.Length], 0);
            //precomputed constants
            double logMin = Math.Log10(hdrImage.Min());
            double factor = (Math.Pow(2, bitDepth) - 1) / (Math.Log10(hdrImage.Max()) - logMin);
            for (int p = 0; p < hdrImage.Length; p++)    //iterate over every pixel
            {
                result.Data[p] = (byte)((Math.Log10(hdrImage[p]) - logMin) * factor);
            }
            return result;
        }
    }
}
